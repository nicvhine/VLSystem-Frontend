import { Collection } from "../utils/Types/collection";

// Printing Sheet
export const handlePrint = (setPrintMode: (v: boolean) => void) => {
  setPrintMode(true);

  setTimeout(() => {
    const table = document.querySelector("table");
    if (!table) {
      alert("No table found to print.");
      setPrintMode(false);
      return;
    }

    const printWindow = window.open("", "_blank");
    if (!printWindow) {
      alert("Unable to open print window.");
      setPrintMode(false);
      return;
    }

    const today = new Date().toLocaleDateString("en-PH", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });

    printWindow.document.write(`
      <html>
        <head>
          <title>Collections Report - ${today}</title>
          <style>
            @page {
              margin: 20mm;
            }

            body {
              font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
              margin: 0;
              padding: 0;
              background: #fff;
              color: #333;
            }

            .header {
              text-align: center;
              margin-bottom: 40px;
              border-bottom: 2px solid #b91c1c;
              padding-bottom: 10px;
            }

            .company-name {
              font-size: 22px;
              font-weight: 700;
              color: #b91c1c;
              margin-bottom: 5px;
            }

            .report-title {
              font-size: 18px;
              font-weight: 600;
              color: #111827;
              margin-bottom: 3px;
            }

            .report-date {
              font-size: 14px;
              color: #6b7280;
            }

            table {
              border-collapse: collapse;
              width: 100%;
              margin-top: 20px;
              font-size: 14px;
              border-radius: 8px;
              overflow: hidden;
              box-shadow: 0 0 6px rgba(0,0,0,0.08);
            }

            th {
              background: linear-gradient(to bottom, #ef4444, #dc2626);
              color: white;
              font-weight: 600;
              text-align: left;
              padding: 12px 10px;
            }

            td {
              border-bottom: 1px solid #e5e7eb;
              padding: 10px 8px;
              text-align: left;
              vertical-align: middle;
            }

            tr:nth-child(even) td {
              background-color: #f9fafb;
            }

            tr:hover td {
              background-color: #f3f4f6;
            }

            td.amount {
              text-align: right;
              font-variant-numeric: tabular-nums;
            }

            tfoot td {
              font-weight: bold;
              border-top: 2px solid #b91c1c;
              background-color: #fef2f2;
              color: #991b1b;
            }

            .summary-box {
              margin-top: 25px;
              padding: 15px;
              background: #fef2f2;
              border-left: 4px solid #b91c1c;
              border-radius: 6px;
              font-size: 14px;
              width: fit-content;
            }

            .footer {
              text-align: center;
              margin-top: 40px;
              font-size: 12px;
              color: #9ca3af;
            }
          </style>
        </head>
        <body>
          <div class="header">
            <div class="company-name">Vistula Lending Corporation</div>
            <div class="report-title">Collections Report</div>
            <div class="report-date">${today}</div>
          </div>

          ${table.outerHTML}

          <div class="summary-box">
            Summary: ${table.querySelectorAll("tr").length - 1} records printed on ${today}.
          </div>

          <div class="footer">
            Generated by Vistula Lending System â€¢ Confidential Report
          </div>
        </body>
      </html>
    `);

    printWindow.document.close();
    printWindow.focus();
    printWindow.print();
    printWindow.close();

    setPrintMode(false);
  }, 200);
};

// Open Payment Modal
export const handleMakePayment = (
  collection: Collection,
  setSelectedCollection: (col: Collection | null) => void,
  setPaymentAmount: (amount: number) => void,
  setShowModal: (v: boolean) => void
) => {
  setSelectedCollection(collection);
  setPaymentAmount(collection.periodAmount - collection.paidAmount);
  setShowModal(true);
};

// Open Note Modal
export const handleAddNote = (
  collection: Collection,
  setSelectedCollection: (col: Collection | null) => void,
  setNoteText: (text: string) => void,
  setShowNoteModal: (v: boolean) => void
) => {
  setSelectedCollection(collection);
  setNoteText(collection.note || "");
  setShowNoteModal(true);
};

// Close Payment Modal
export const handlePaymentModalClose = (
  setIsPaymentModalAnimating: (v: boolean) => void,
  setShowModal: (v: boolean) => void,
  setIsPaymentModalVisible: (v: boolean) => void,
  setSelectedCollection: (col: Collection | null) => void,
  setPaymentAmount: (amount: number) => void
) => {
  setIsPaymentModalAnimating(false);
  setTimeout(() => {
    setShowModal(false);
    setIsPaymentModalVisible(false);
    setSelectedCollection(null);
    setPaymentAmount(0);
  }, 150);
};

// Close Note Modal
export const handleNoteModalClose = (
  setIsNoteModalAnimating: (v: boolean) => void,
  setShowNoteModal: (v: boolean) => void,
  setIsNoteModalVisible: (v: boolean) => void,
  setSelectedCollection: (col: Collection | null) => void,
  setNoteText: (text: string) => void
) => {
  setIsNoteModalAnimating(false);
  setTimeout(() => {
    setShowNoteModal(false);
    setIsNoteModalVisible(false);
    setSelectedCollection(null);
    setNoteText("");
  }, 150);
};

// Confirm Payment
export const handleConfirmPayment = async (
  selectedCollection: Collection | null,
  paymentAmount: number,
  setCollections: (cb: (prev: Collection[]) => Collection[]) => void,
  setPaymentLoading: (v: boolean) => void,
  setShowPaymentConfirm: (v: boolean) => void,
  setErrorMsg: (msg: string) => void,
  setShowErrorModal: (v: boolean) => void,
  handleClose: () => void
) => {
  if (!selectedCollection) return;
  setPaymentLoading(true);

  try {
    const response = await fetch(
      `http://localhost:3001/payments/${selectedCollection.referenceNumber}/cash`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ amount: paymentAmount }),
      }
    );

    if (!response.ok) throw new Error("Failed to post payment");

    const updatedCollection: Collection = await response.json();

    setCollections((prev) =>
      prev.map((col) =>
        col.referenceNumber === updatedCollection.referenceNumber
          ? updatedCollection
          : col
      )
    );
  } catch (err) {
    console.error("Payment failed:", err);
    setErrorMsg("Payment failed.");
    setShowErrorModal(true);
  } finally {
    setPaymentLoading(false);
    setShowPaymentConfirm(false);
    handleClose(); 
  }
};

// Save Note
export const handleSaveNote = async (
  selectedCollection: Collection | null,
  noteText: string,
  setCollections: (cb: (prev: Collection[]) => Collection[]) => void,
  setErrorMsg: (msg: string) => void,
  setShowErrorModal: (v: boolean) => void,
  handleClose: () => void
) => {
  if (!selectedCollection) return;

  try {
    const response = await fetch(
      `http://localhost:3001/collections/${selectedCollection.referenceNumber}/note`,
      {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ note: noteText }),
      }
    );

    if (!response.ok) throw new Error("Failed to save note");

    const updatedCollection: Collection = await response.json();

    setCollections((prev) =>
      prev.map((col) =>
        col.referenceNumber === updatedCollection.referenceNumber
          ? updatedCollection
          : col
      )
    );
  } catch (err) {
    console.error("Saving note failed:", err);
    setErrorMsg("Failed to save note.");
    setShowErrorModal(true);
  } finally {
    handleClose(); 
  }
};
